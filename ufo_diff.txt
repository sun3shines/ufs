
# 底层的stobj支撑起 url层。对外提供dir等方式了。

# 然后是底层的stobj，执行实际的fs操作，比如说listdir等操作，获取到真正的文件内容。负责metadata的操作。

# 然后是md5obj了，实现真正的数据操作。
#
# 虽然是多层，但是并没有发生同层次的交互，即底层次即可直接代表高层层次的逻辑了。
#
# 现在为了维持句柄，改如何是好？传递同个句柄？还是多个层次的句柄，但是都保持同样的资源了。让每个层次，处理不同层次的对象了。是的。
#
# 每个层次，都有该层次的操作了。其实每个操作说处理的内容非常的少了。是的。每个层次，通过继承的方式，获取改成的相关信息。以及封装和该层的操作。比如说在url层，疯转网络信息，以及url的处理函数。在stpath，则执行相关的os。listdir。或者os。eixsts等操作。在meta层，则执行相关的dict操作。和key，和lock相关的内容了。是的。
#
# 完成这样的设计，就不难了，是的。分层次的处理，是最好的。那么分层，则是因为每层的环境是不同的。比如说url层，则是对于url的处理了。而stobj层，则是对于文件系统的处理了。而metadata，则是在内存层次的处理了。这个就是分层思想的重要性了。
#
# 不要一上来就是各种的抽象了。

对于缺乏环境操作的，比如memObj，则还是把其的数据结构融入到其的上级吧。

分层后，不要去抽象，去继承，尤其不同的层次中的内容，不可取抽象出来且继承了。是的。

对于md5文件的读写。只是需要返回一个Md5对象即可了。需要的时候读写就可以了。是的。

因为有了路径，就是有了数据了。或者是句柄，可以重新打开了。

如何设计出来更好的逻辑来？关于md5和st的关系？

w完善新的ast，dst，cst，fst，lst等文件。

views.py 处理和http相关的内容，例如headers，urlpath。code，errorcode 等。把剩余的内容，转发给st层。

编写dst层，其中ast和cst都是继承与其了。是的。

写一个路径url驱动。重写新的API了。比如/file/put,/file/get,/file/copy,/file/move,/file/delete

/dir/put,/dir/get,/dir/head/,/dir/delete就写这两个，就可以了。然后兼容swift的接口了。是的。等于是重写了编swift了？后台，但是没有那些的层了。是的。

v1则为swift的接口了，u1则为ufs的。

proxy，为代理作用。实现各种接口的request的重新分发了。比如说swift的各种功能方式，会重新发送到server上了。是的。完成一些新的功能等。是的。主要是对于swift相关接口的重新分发了。双server的形式了。

写一个新的接口转发，完成swift的object，account，container的各种功能等。那么这个新的ufs就算完成了。

无论所写的代码，丑或者不丑，都是我们的财富了。尽量减少丑的代码，即可了。后续想办法优化。

copy DIR 的方式，就是列出来所有的文件列表了？然后依次创建了？因为使用os.system 太难看了。是的。使用open，或者file还是不错的。

使用shutil模块。 进行文件IO操作。

